// Generated by CIRCT firtool-1.87.0
module AddrDecode(
  input  [63:0] io_addrRaw,
  output        io_sel_0,
                io_sel_1,
                io_sel_2,
                io_sel_3,
                io_sel_4,
                io_sel_5,
                io_sel_6,
  output [63:0] io_addrOut,
  output        io_errorCode
);

  wire [63:0] addrMasked = {61'h0, io_addrRaw[5:3]};
  wire        selOut_0 = io_addrRaw[5:3] == 3'h0;
  wire        _io_addrOut_T_4 = addrMasked < 64'h2;
  wire        _io_addrOut_T_7 = addrMasked < 64'h3;
  wire        _io_addrOut_T_9 = addrMasked > 64'h2;
  wire        _io_addrOut_T_10 = addrMasked < 64'h4;
  wire        _io_addrOut_T_13 = addrMasked < 64'h5;
  wire        _io_addrOut_T_15 = addrMasked > 64'h4;
  wire        _io_addrOut_T_16 = addrMasked < 64'h6;
  wire        _io_addrOut_T_18 = addrMasked > 64'h5;
  wire        _io_addrOut_T_19 = addrMasked < 64'h7;
  wire [63:0] _GEN = {61'h0, io_addrRaw[5:3]};
  assign io_sel_0 = selOut_0;
  assign io_sel_1 = (|(io_addrRaw[5:3])) & _io_addrOut_T_4;
  assign io_sel_2 = (|(io_addrRaw[5:4])) & _io_addrOut_T_7;
  assign io_sel_3 = _io_addrOut_T_9 & _io_addrOut_T_10;
  assign io_sel_4 = io_addrRaw[5] & _io_addrOut_T_13;
  assign io_sel_5 = _io_addrOut_T_15 & _io_addrOut_T_16;
  assign io_sel_6 = _io_addrOut_T_18 & _io_addrOut_T_19;
  assign io_addrOut =
    _io_addrOut_T_18 & _io_addrOut_T_19
      ? _GEN - 64'h6
      : _io_addrOut_T_15 & _io_addrOut_T_16
          ? _GEN - 64'h5
          : io_addrRaw[5] & _io_addrOut_T_13
              ? _GEN - 64'h4
              : _io_addrOut_T_9 & _io_addrOut_T_10
                  ? _GEN - 64'h3
                  : (|(io_addrRaw[5:4])) & _io_addrOut_T_7
                      ? _GEN - 64'h2
                      : (|(io_addrRaw[5:3])) & _io_addrOut_T_4
                          ? _GEN - 64'h1
                          : selOut_0 ? addrMasked : 64'h0;
  assign io_errorCode = addrMasked > 64'h6;
endmodule

module TimerInner(
  input         clock,
                reset,
                io_timerInputBundle_en,
  input  [63:0] io_timerInputBundle_prescaler,
                io_timerInputBundle_maxCount,
                io_timerInputBundle_pwmCeiling,
                io_timerInputBundle_setCountValue,
  input         io_timerInputBundle_setCount,
                io_timerInputBundle_maxCountEnableInterrupt,
  output [63:0] io_timerOutputBundle_count,
  output        io_timerOutputBundle_maxReached,
                io_timerOutputBundle_pwm,
                io_timerOutputBundle_interrupts_maxCountInterrupt
);

  reg  [63:0] countReg;
  reg         maxReachedReg;
  reg         pwmReg;
  reg         maxCountInterruptReg;
  reg  [63:0] prescalerCounterReg;
  reg         prescalerWrapReg;
  wire [63:0] _GEN =
    io_timerInputBundle_en & prescalerWrapReg
      ? (countReg >= io_timerInputBundle_maxCount ? 64'h0 : countReg + 64'h1)
      : countReg;
  wire [63:0] countNextBeforeBoundsCheck =
    io_timerInputBundle_setCount ? io_timerInputBundle_setCountValue : _GEN;
  wire        maxReachedNextTemp =
    io_timerInputBundle_en & ~io_timerInputBundle_setCount
    & (countNextBeforeBoundsCheck >= io_timerInputBundle_maxCount | io_timerInputBundle_en
       & ~io_timerInputBundle_setCount & prescalerWrapReg
       & countNextBeforeBoundsCheck == 64'h0);
  always @(posedge clock) begin
    if (reset) begin
      countReg <= 64'h0;
      maxReachedReg <= 1'h0;
      pwmReg <= 1'h0;
      maxCountInterruptReg <= 1'h0;
      prescalerCounterReg <= 64'h0;
      prescalerWrapReg <= 1'h0;
    end
    else begin
      if (io_timerInputBundle_en) begin
        if (maxReachedNextTemp)
          countReg <= 64'h0;
        else if (io_timerInputBundle_setCount)
          countReg <= io_timerInputBundle_setCountValue;
        else
          countReg <= _GEN;
        prescalerCounterReg <=
          prescalerCounterReg >= io_timerInputBundle_prescaler
          | io_timerInputBundle_setCount
            ? 64'h0
            : prescalerCounterReg + 64'h1;
      end
      else if (io_timerInputBundle_setCount)
        countReg <= io_timerInputBundle_setCountValue;
      maxReachedReg <= maxReachedNextTemp;
      pwmReg <= io_timerInputBundle_en & countReg >= io_timerInputBundle_pwmCeiling;
      maxCountInterruptReg <=
        maxReachedNextTemp & io_timerInputBundle_maxCountEnableInterrupt;
      prescalerWrapReg <=
        io_timerInputBundle_en
        & (prescalerCounterReg == io_timerInputBundle_prescaler
           | io_timerInputBundle_setCount);
    end
  end // always @(posedge)
  assign io_timerOutputBundle_count = countReg;
  assign io_timerOutputBundle_maxReached = maxReachedReg;
  assign io_timerOutputBundle_pwm = pwmReg;
  assign io_timerOutputBundle_interrupts_maxCountInterrupt = maxCountInterruptReg;
endmodule

module Timer(
  input         clock,
                reset,
                io_apb_PSEL,
                io_apb_PENABLE,
                io_apb_PWRITE,
  input  [63:0] io_apb_PADDR,
                io_apb_PWDATA,
  output [63:0] io_apb_PRDATA,
  output        io_apb_PREADY,
                io_apb_PSLVERR,
  output [63:0] io_timerOutput_count,
  output        io_timerOutput_maxReached,
                io_timerOutput_pwm,
                io_timerOutput_interrupts_maxCountInterrupt
);

  wire        _addrDecode_io_sel_0;
  wire        _addrDecode_io_sel_1;
  wire        _addrDecode_io_sel_2;
  wire        _addrDecode_io_sel_3;
  wire        _addrDecode_io_sel_4;
  wire        _addrDecode_io_sel_5;
  wire        _addrDecode_io_sel_6;
  wire [63:0] _addrDecode_io_addrOut;
  reg         en;
  reg  [63:0] prescaler;
  reg  [63:0] maxCount;
  reg  [63:0] pwmCeiling;
  reg  [63:0] setCountValue;
  reg         setCount;
  reg         maxCountEnableInterrupt;
  wire        io_apb_PREADY_0 = io_apb_PENABLE & io_apb_PSEL;
  always @(posedge clock) begin
    if (reset) begin
      en <= 1'h0;
      prescaler <= 64'h0;
      maxCount <= 64'h0;
      pwmCeiling <= 64'h0;
      setCountValue <= 64'h0;
      setCount <= 1'h0;
      maxCountEnableInterrupt <= 1'h0;
    end
    else begin
      if (~(io_apb_PREADY_0 & io_apb_PWRITE & _addrDecode_io_sel_0)
          | (|(_addrDecode_io_addrOut[63:3]))) begin
      end
      else
        en <= io_apb_PWDATA[0];
      if (~(io_apb_PREADY_0 & io_apb_PWRITE & _addrDecode_io_sel_1)
          | (|(_addrDecode_io_addrOut[63:3]))) begin
      end
      else
        prescaler <= io_apb_PWDATA;
      if (~(io_apb_PREADY_0 & io_apb_PWRITE & _addrDecode_io_sel_2)
          | (|(_addrDecode_io_addrOut[63:3]))) begin
      end
      else
        maxCount <= io_apb_PWDATA;
      if (~(io_apb_PREADY_0 & io_apb_PWRITE & _addrDecode_io_sel_3)
          | (|(_addrDecode_io_addrOut[63:3]))) begin
      end
      else
        pwmCeiling <= io_apb_PWDATA;
      if (~(io_apb_PREADY_0 & io_apb_PWRITE & _addrDecode_io_sel_4)
          | (|(_addrDecode_io_addrOut[63:3]))) begin
      end
      else
        setCountValue <= io_apb_PWDATA;
      if (~(io_apb_PREADY_0 & io_apb_PWRITE & _addrDecode_io_sel_5)
          | (|(_addrDecode_io_addrOut[63:3]))) begin
      end
      else
        setCount <= io_apb_PWDATA[0];
      if (~(io_apb_PREADY_0 & io_apb_PWRITE & _addrDecode_io_sel_6)
          | (|(_addrDecode_io_addrOut[63:3]))) begin
      end
      else
        maxCountEnableInterrupt <= io_apb_PWDATA[0];
    end
  end // always @(posedge)
  AddrDecode addrDecode (
    .io_addrRaw   (io_apb_PADDR),
    .io_sel_0     (_addrDecode_io_sel_0),
    .io_sel_1     (_addrDecode_io_sel_1),
    .io_sel_2     (_addrDecode_io_sel_2),
    .io_sel_3     (_addrDecode_io_sel_3),
    .io_sel_4     (_addrDecode_io_sel_4),
    .io_sel_5     (_addrDecode_io_sel_5),
    .io_sel_6     (_addrDecode_io_sel_6),
    .io_addrOut   (_addrDecode_io_addrOut),
    .io_errorCode (io_apb_PSLVERR)
  );
  TimerInner timerInner (
    .clock                                             (clock),
    .reset                                             (reset),
    .io_timerInputBundle_en                            (en),
    .io_timerInputBundle_prescaler                     (prescaler),
    .io_timerInputBundle_maxCount                      (maxCount),
    .io_timerInputBundle_pwmCeiling                    (pwmCeiling),
    .io_timerInputBundle_setCountValue                 (setCountValue),
    .io_timerInputBundle_setCount                      (setCount),
    .io_timerInputBundle_maxCountEnableInterrupt       (maxCountEnableInterrupt),
    .io_timerOutputBundle_count                        (io_timerOutput_count),
    .io_timerOutputBundle_maxReached                   (io_timerOutput_maxReached),
    .io_timerOutputBundle_pwm                          (io_timerOutput_pwm),
    .io_timerOutputBundle_interrupts_maxCountInterrupt
      (io_timerOutput_interrupts_maxCountInterrupt)
  );
  assign io_apb_PRDATA =
    ~io_apb_PREADY_0 | io_apb_PWRITE
      ? 64'h0
      : _addrDecode_io_sel_6
          ? ((|(_addrDecode_io_addrOut[63:3])) ? 64'h0 : {63'h0, maxCountEnableInterrupt})
          : _addrDecode_io_sel_5
              ? ((|(_addrDecode_io_addrOut[63:3])) ? 64'h0 : {63'h0, setCount})
              : _addrDecode_io_sel_4
                  ? ((|(_addrDecode_io_addrOut[63:3])) ? 64'h0 : setCountValue)
                  : _addrDecode_io_sel_3
                      ? ((|(_addrDecode_io_addrOut[63:3])) ? 64'h0 : pwmCeiling)
                      : _addrDecode_io_sel_2
                          ? ((|(_addrDecode_io_addrOut[63:3])) ? 64'h0 : maxCount)
                          : _addrDecode_io_sel_1
                              ? ((|(_addrDecode_io_addrOut[63:3])) ? 64'h0 : prescaler)
                              : ~_addrDecode_io_sel_0 | (|(_addrDecode_io_addrOut[63:3]))
                                  ? 64'h0
                                  : {63'h0, en};
  assign io_apb_PREADY = io_apb_PREADY_0;
endmodule