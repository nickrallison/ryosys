// Generated by CIRCT firtool-1.62.1-1-gdf5ed6ea5
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module AddrDecode(
  input  [31:0] io_addrRaw,
  input         io_en,
  output        io_sel_0,
                io_sel_1,
                io_sel_2,
                io_sel_3,
                io_sel_4,
                io_sel_5,
                io_sel_6,
                io_sel_7,
                io_sel_8,
                io_sel_9,
                io_sel_10,
                io_sel_11,
                io_sel_12,
                io_sel_13,
                io_sel_14,
                io_sel_15,
                io_sel_16,
                io_sel_17,
                io_sel_18,
                io_sel_19,
                io_sel_20,
                io_sel_21,
                io_sel_22,
                io_sel_23,
                io_sel_24,
                io_sel_25,
                io_sel_26,
                io_sel_27,
                io_sel_28,
                io_sel_29,
                io_sel_30,
                io_sel_31,
                io_sel_32,
                io_sel_33,
  output [31:0] io_addrOut,
  output        io_errorCode
);

  wire [31:0] addrMasked = {26'h0, io_addrRaw[7:2]};
  wire        selOut_0 = io_addrRaw[7:2] == 6'h0;
  wire        _io_addrOut_T_4 = addrMasked < 32'h2;
  wire        _io_addrOut_T_7 = addrMasked < 32'h3;
  wire        _io_addrOut_T_9 = addrMasked > 32'h2;
  wire        _io_addrOut_T_10 = addrMasked < 32'h4;
  wire        _io_addrOut_T_13 = addrMasked < 32'h5;
  wire        _io_addrOut_T_15 = addrMasked > 32'h4;
  wire        _io_addrOut_T_16 = addrMasked < 32'h6;
  wire        _io_addrOut_T_18 = addrMasked > 32'h5;
  wire        _io_addrOut_T_19 = addrMasked < 32'h7;
  wire        _io_addrOut_T_21 = addrMasked > 32'h6;
  wire        _io_addrOut_T_22 = addrMasked < 32'h8;
  wire        _io_addrOut_T_25 = addrMasked < 32'h9;
  wire        _io_addrOut_T_27 = addrMasked > 32'h8;
  wire        _io_addrOut_T_28 = addrMasked < 32'hA;
  wire        _io_addrOut_T_30 = addrMasked > 32'h9;
  wire        _io_addrOut_T_31 = addrMasked < 32'hB;
  wire        _io_addrOut_T_33 = addrMasked > 32'hA;
  wire        _io_addrOut_T_34 = addrMasked < 32'hC;
  wire        _io_addrOut_T_36 = addrMasked > 32'hB;
  wire        _io_addrOut_T_37 = addrMasked < 32'hD;
  wire        _io_addrOut_T_39 = addrMasked > 32'hC;
  wire        _io_addrOut_T_40 = addrMasked < 32'hE;
  wire        _io_addrOut_T_42 = addrMasked > 32'hD;
  wire        _io_addrOut_T_43 = addrMasked < 32'hF;
  wire        _io_addrOut_T_45 = addrMasked > 32'hE;
  wire        _io_addrOut_T_46 = addrMasked < 32'h10;
  wire        _io_addrOut_T_49 = addrMasked < 32'h11;
  wire        _io_addrOut_T_51 = addrMasked > 32'h10;
  wire        _io_addrOut_T_52 = addrMasked < 32'h12;
  wire        _io_addrOut_T_54 = addrMasked > 32'h11;
  wire        _io_addrOut_T_55 = addrMasked < 32'h13;
  wire        _io_addrOut_T_57 = addrMasked > 32'h12;
  wire        _io_addrOut_T_58 = addrMasked < 32'h14;
  wire        _io_addrOut_T_60 = addrMasked > 32'h13;
  wire        _io_addrOut_T_61 = addrMasked < 32'h15;
  wire        _io_addrOut_T_63 = addrMasked > 32'h14;
  wire        _io_addrOut_T_64 = addrMasked < 32'h16;
  wire        _io_addrOut_T_66 = addrMasked > 32'h15;
  wire        _io_addrOut_T_67 = addrMasked < 32'h17;
  wire        _io_addrOut_T_69 = addrMasked > 32'h16;
  wire        _io_addrOut_T_70 = addrMasked < 32'h18;
  wire        _io_addrOut_T_72 = addrMasked > 32'h17;
  wire        _io_addrOut_T_73 = addrMasked < 32'h19;
  wire        _io_addrOut_T_75 = addrMasked > 32'h18;
  wire        _io_addrOut_T_76 = addrMasked < 32'h1A;
  wire        _io_addrOut_T_78 = addrMasked > 32'h19;
  wire        _io_addrOut_T_79 = addrMasked < 32'h1B;
  wire        _io_addrOut_T_81 = addrMasked > 32'h1A;
  wire        _io_addrOut_T_82 = addrMasked < 32'h1C;
  wire        _io_addrOut_T_84 = addrMasked > 32'h1B;
  wire        _io_addrOut_T_85 = addrMasked < 32'h1D;
  wire        _io_addrOut_T_87 = addrMasked > 32'h1C;
  wire        _io_addrOut_T_88 = addrMasked < 32'h1E;
  wire        _io_addrOut_T_90 = addrMasked > 32'h1D;
  wire        _io_addrOut_T_91 = addrMasked < 32'h1F;
  wire        _io_addrOut_T_93 = addrMasked > 32'h1E;
  wire        _io_addrOut_T_94 = addrMasked < 32'h20;
  wire        _io_addrOut_T_97 = addrMasked < 32'h21;
  wire        _io_addrOut_T_99 = addrMasked > 32'h20;
  wire        _io_addrOut_T_100 = addrMasked < 32'h22;
  wire [31:0] _GEN = {26'h0, io_addrRaw[7:2]};
  assign io_sel_0 = io_en & selOut_0;
  assign io_sel_1 = io_en & (|(io_addrRaw[7:2])) & _io_addrOut_T_4;
  assign io_sel_2 = io_en & (|(io_addrRaw[7:3])) & _io_addrOut_T_7;
  assign io_sel_3 = io_en & _io_addrOut_T_9 & _io_addrOut_T_10;
  assign io_sel_4 = io_en & (|(io_addrRaw[7:4])) & _io_addrOut_T_13;
  assign io_sel_5 = io_en & _io_addrOut_T_15 & _io_addrOut_T_16;
  assign io_sel_6 = io_en & _io_addrOut_T_18 & _io_addrOut_T_19;
  assign io_sel_7 = io_en & _io_addrOut_T_21 & _io_addrOut_T_22;
  assign io_sel_8 = io_en & (|(io_addrRaw[7:5])) & _io_addrOut_T_25;
  assign io_sel_9 = io_en & _io_addrOut_T_27 & _io_addrOut_T_28;
  assign io_sel_10 = io_en & _io_addrOut_T_30 & _io_addrOut_T_31;
  assign io_sel_11 = io_en & _io_addrOut_T_33 & _io_addrOut_T_34;
  assign io_sel_12 = io_en & _io_addrOut_T_36 & _io_addrOut_T_37;
  assign io_sel_13 = io_en & _io_addrOut_T_39 & _io_addrOut_T_40;
  assign io_sel_14 = io_en & _io_addrOut_T_42 & _io_addrOut_T_43;
  assign io_sel_15 = io_en & _io_addrOut_T_45 & _io_addrOut_T_46;
  assign io_sel_16 = io_en & (|(io_addrRaw[7:6])) & _io_addrOut_T_49;
  assign io_sel_17 = io_en & _io_addrOut_T_51 & _io_addrOut_T_52;
  assign io_sel_18 = io_en & _io_addrOut_T_54 & _io_addrOut_T_55;
  assign io_sel_19 = io_en & _io_addrOut_T_57 & _io_addrOut_T_58;
  assign io_sel_20 = io_en & _io_addrOut_T_60 & _io_addrOut_T_61;
  assign io_sel_21 = io_en & _io_addrOut_T_63 & _io_addrOut_T_64;
  assign io_sel_22 = io_en & _io_addrOut_T_66 & _io_addrOut_T_67;
  assign io_sel_23 = io_en & _io_addrOut_T_69 & _io_addrOut_T_70;
  assign io_sel_24 = io_en & _io_addrOut_T_72 & _io_addrOut_T_73;
  assign io_sel_25 = io_en & _io_addrOut_T_75 & _io_addrOut_T_76;
  assign io_sel_26 = io_en & _io_addrOut_T_78 & _io_addrOut_T_79;
  assign io_sel_27 = io_en & _io_addrOut_T_81 & _io_addrOut_T_82;
  assign io_sel_28 = io_en & _io_addrOut_T_84 & _io_addrOut_T_85;
  assign io_sel_29 = io_en & _io_addrOut_T_87 & _io_addrOut_T_88;
  assign io_sel_30 = io_en & _io_addrOut_T_90 & _io_addrOut_T_91;
  assign io_sel_31 = io_en & _io_addrOut_T_93 & _io_addrOut_T_94;
  assign io_sel_32 = io_en & io_addrRaw[7] & _io_addrOut_T_97;
  assign io_sel_33 = io_en & _io_addrOut_T_99 & _io_addrOut_T_100;
  assign io_addrOut =
    io_en
      ? (_io_addrOut_T_99 & _io_addrOut_T_100
           ? _GEN - 32'h21
           : io_addrRaw[7] & _io_addrOut_T_97
               ? _GEN - 32'h20
               : _io_addrOut_T_93 & _io_addrOut_T_94
                   ? _GEN - 32'h1F
                   : _io_addrOut_T_90 & _io_addrOut_T_91
                       ? _GEN - 32'h1E
                       : _io_addrOut_T_87 & _io_addrOut_T_88
                           ? _GEN - 32'h1D
                           : _io_addrOut_T_84 & _io_addrOut_T_85
                               ? _GEN - 32'h1C
                               : _io_addrOut_T_81 & _io_addrOut_T_82
                                   ? _GEN - 32'h1B
                                   : _io_addrOut_T_78 & _io_addrOut_T_79
                                       ? _GEN - 32'h1A
                                       : _io_addrOut_T_75 & _io_addrOut_T_76
                                           ? _GEN - 32'h19
                                           : _io_addrOut_T_72 & _io_addrOut_T_73
                                               ? _GEN - 32'h18
                                               : _io_addrOut_T_69 & _io_addrOut_T_70
                                                   ? _GEN - 32'h17
                                                   : _io_addrOut_T_66 & _io_addrOut_T_67
                                                       ? _GEN - 32'h16
                                                       : _io_addrOut_T_63
                                                         & _io_addrOut_T_64
                                                           ? _GEN - 32'h15
                                                           : _io_addrOut_T_60
                                                             & _io_addrOut_T_61
                                                               ? _GEN - 32'h14
                                                               : _io_addrOut_T_57
                                                                 & _io_addrOut_T_58
                                                                   ? _GEN - 32'h13
                                                                   : _io_addrOut_T_54
                                                                     & _io_addrOut_T_55
                                                                       ? _GEN - 32'h12
                                                                       : _io_addrOut_T_51
                                                                         & _io_addrOut_T_52
                                                                           ? _GEN - 32'h11
                                                                           : (|(io_addrRaw[7:6]))
                                                                             & _io_addrOut_T_49
                                                                               ? _GEN
                                                                                 - 32'h10
                                                                               : _io_addrOut_T_45
                                                                                 & _io_addrOut_T_46
                                                                                   ? _GEN
                                                                                     - 32'hF
                                                                                   : _io_addrOut_T_42
                                                                                     & _io_addrOut_T_43
                                                                                       ? _GEN
                                                                                         - 32'hE
                                                                                       : _io_addrOut_T_39
                                                                                         & _io_addrOut_T_40
                                                                                           ? _GEN
                                                                                             - 32'hD
                                                                                           : _io_addrOut_T_36
                                                                                             & _io_addrOut_T_37
                                                                                               ? _GEN
                                                                                                 - 32'hC
                                                                                               : _io_addrOut_T_33
                                                                                                 & _io_addrOut_T_34
                                                                                                   ? _GEN
                                                                                                     - 32'hB
                                                                                                   : _io_addrOut_T_30
                                                                                                     & _io_addrOut_T_31
                                                                                                       ? _GEN
                                                                                                         - 32'hA
                                                                                                       : _io_addrOut_T_27
                                                                                                         & _io_addrOut_T_28
                                                                                                           ? _GEN
                                                                                                             - 32'h9
                                                                                                           : (|(io_addrRaw[7:5]))
                                                                                                             & _io_addrOut_T_25
                                                                                                               ? _GEN
                                                                                                                 - 32'h8
                                                                                                               : _io_addrOut_T_21
                                                                                                                 & _io_addrOut_T_22
                                                                                                                   ? _GEN
                                                                                                                     - 32'h7
                                                                                                                   : _io_addrOut_T_18
                                                                                                                     & _io_addrOut_T_19
                                                                                                                       ? _GEN
                                                                                                                         - 32'h6
                                                                                                                       : _io_addrOut_T_15
                                                                                                                         & _io_addrOut_T_16
                                                                                                                           ? _GEN
                                                                                                                             - 32'h5
                                                                                                                           : (|(io_addrRaw[7:4]))
                                                                                                                             & _io_addrOut_T_13
                                                                                                                               ? _GEN
                                                                                                                                 - 32'h4
                                                                                                                               : _io_addrOut_T_9
                                                                                                                                 & _io_addrOut_T_10
                                                                                                                                   ? _GEN
                                                                                                                                     - 32'h3
                                                                                                                                   : (|(io_addrRaw[7:3]))
                                                                                                                                     & _io_addrOut_T_7
                                                                                                                                       ? _GEN
                                                                                                                                         - 32'h2
                                                                                                                                       : (|(io_addrRaw[7:2]))
                                                                                                                                         & _io_addrOut_T_4
                                                                                                                                           ? _GEN
                                                                                                                                             - 32'h1
                                                                                                                                           : selOut_0
                                                                                                                                               ? addrMasked
                                                                                                                                               : 32'h0)
      : 32'h0;
  assign io_errorCode = io_en & addrMasked > 32'h21;
endmodule

module UartFsmCounter(
  input         clock,
                reset,
  input  [20:0] io_clockCounterMax,
  input         io_clockCounterIncrement,
  input  [4:0]  io_numOutputBits,
  input         io_useParity,
  output [20:0] io_clockCounter,
  output [4:0]  io_bitCounter
);

  reg  [20:0] clockCounterReg;
  reg  [4:0]  bitCounterReg;
  wire [20:0] _clockCounterIncrmentResult_incrementedInner_T = clockCounterReg + 21'h1;
  wire [20:0] clockCounterIncrmentResult_incrementedInner =
    io_clockCounterIncrement
      ? _clockCounterIncrmentResult_incrementedInner_T
      : clockCounterReg;
  wire        _clockCounterIncrmentResult_T_2 =
    clockCounterIncrmentResult_incrementedInner >= io_clockCounterMax
    | clockCounterIncrmentResult_incrementedInner < clockCounterReg;
  wire [4:0]  bitCounterMax =
    io_useParity ? io_numOutputBits + 5'h3 : io_numOutputBits + 5'h2;
  wire        _GEN =
    bitCounterReg == bitCounterMax - 5'h1 & clockCounterReg == io_clockCounterMax - 21'h1;
  wire        bitCounterIncrement =
    ~_GEN & io_clockCounterIncrement & _clockCounterIncrmentResult_T_2;
  wire [4:0]  _bitCounterIncrementResult_incrementedInner_T = bitCounterReg + 5'h1;
  wire [4:0]  bitCounterIncrementResult_incrementedInner =
    bitCounterIncrement ? _bitCounterIncrementResult_incrementedInner_T : bitCounterReg;
  always @(posedge clock) begin
    if (reset) begin
      clockCounterReg <= 21'h0;
      bitCounterReg <= 5'h0;
    end
    else if (_GEN) begin
      clockCounterReg <= 21'h0;
      bitCounterReg <= 5'h0;
    end
    else begin
      if (io_clockCounterIncrement) begin
        if (_clockCounterIncrmentResult_T_2)
          clockCounterReg <= 21'h0;
        else if (io_clockCounterIncrement)
          clockCounterReg <= _clockCounterIncrmentResult_incrementedInner_T;
      end
      if (bitCounterIncrement) begin
        if (bitCounterIncrementResult_incrementedInner >= bitCounterMax
            | bitCounterIncrementResult_incrementedInner < bitCounterReg)
          bitCounterReg <= 5'h0;
        else if (bitCounterIncrement)
          bitCounterReg <= _bitCounterIncrementResult_incrementedInner_T;
      end
    end
  end // always @(posedge)
  assign io_clockCounter = clockCounterReg;
  assign io_bitCounter = bitCounterReg;
endmodule

module UartFsmActive(
  input  clock,
         reset,
         io_idleTransactionStarted,
         io_transactionCompletedAndNotWaiting,
         io_stateStoppedAndWaiting,
  output io_active
);

  reg  activePrev;
  wire activeMealy =
    io_idleTransactionStarted | io_stateStoppedAndWaiting
    | ~(activePrev & io_transactionCompletedAndNotWaiting) & activePrev;
  always @(posedge clock) begin
    if (reset)
      activePrev <= 1'h0;
    else
      activePrev <= activeMealy;
  end // always @(posedge)
  assign io_active = activeMealy;
endmodule

module UartFsm(
  input         clock,
                reset,
                io_startTransaction,
                io_shiftOffset,
                io_waiting,
  input  [20:0] io_clocksPerBit,
  input  [4:0]  io_numOutputBits,
  input         io_useParity,
                io_updateBaud,
                io_baudValid,
  output [2:0]  io_state,
  output        io_shift,
                io_complete,
                io_nextTransaction
);

  wire        io_nextTransaction_0;
  wire        _activeFsm_io_active;
  wire [20:0] _counter_io_clockCounter;
  wire [4:0]  _counter_io_bitCounter;
  wire [20:0] _whenShift_T_2 = io_clocksPerBit - 21'h1;
  wire [4:0]  _state_T_16 = io_numOutputBits + 5'h1;
  wire [4:0]  _state_T_20 = io_numOutputBits + 5'h2;
  wire        combComplete =
    _counter_io_clockCounter == _whenShift_T_2
    & (~io_useParity & _counter_io_bitCounter == _state_T_16 | io_useParity
       & _counter_io_bitCounter == _state_T_20);
  reg  [2:0]  activeFsm_io_idleTransactionStarted_REG;
  reg  [2:0]  activeFsm_io_stateStoppedAndWaiting_REG;
  reg  [2:0]  prevState;
  wire        _state_T_4 = prevState == 3'h1;
  wire        _GEN = io_updateBaud | _state_T_4;
  wire        _state_T_1 = prevState == 3'h0 & io_updateBaud;
  wire        _state_T_3 = _state_T_4 & io_baudValid;
  wire [2:0]  _GEN_0 = {2'h0, _state_T_4 & ~io_baudValid};
  reg         state_REG;
  wire [2:0]  state_state_1 =
    _activeFsm_io_active
      ? (io_nextTransaction_0 | _counter_io_bitCounter == 5'h0
           ? 3'h2
           : (|_counter_io_bitCounter) & _counter_io_bitCounter <= io_numOutputBits
               ? 3'h3
               : io_useParity & _counter_io_bitCounter == _state_T_16
                   ? 3'h4
                   : ~io_useParity & _counter_io_bitCounter == _state_T_16 | io_useParity
                     & _counter_io_bitCounter == _state_T_20
                       ? 3'h5
                       : 3'h0)
      : {1'h0, state_REG & io_waiting, 1'h0};
  wire [2:0]  state =
    _GEN ? (_state_T_1 ? 3'h1 : _state_T_3 ? 3'h0 : _GEN_0) : state_state_1;
  reg         io_nextTransaction_REG;
  assign io_nextTransaction_0 = io_startTransaction | io_nextTransaction_REG & io_waiting;
  always @(posedge clock) begin
    activeFsm_io_idleTransactionStarted_REG <= state;
    activeFsm_io_stateStoppedAndWaiting_REG <= state;
    state_REG <= _activeFsm_io_active;
    io_nextTransaction_REG <= combComplete;
    if (reset)
      prevState <= 3'h0;
    else if (_GEN) begin
      if (_state_T_1)
        prevState <= 3'h1;
      else if (_state_T_3)
        prevState <= 3'h0;
      else
        prevState <= _GEN_0;
    end
    else
      prevState <= state_state_1;
  end // always @(posedge)
  UartFsmCounter counter (
    .clock                    (clock),
    .reset                    (reset),
    .io_clockCounterMax       (io_clocksPerBit),
    .io_clockCounterIncrement (_activeFsm_io_active),
    .io_numOutputBits         (io_numOutputBits),
    .io_useParity             (io_useParity),
    .io_clockCounter          (_counter_io_clockCounter),
    .io_bitCounter            (_counter_io_bitCounter)
  );
  UartFsmActive activeFsm (
    .clock                                (clock),
    .reset                                (reset),
    .io_idleTransactionStarted
      (activeFsm_io_idleTransactionStarted_REG == 3'h0 & io_startTransaction),
    .io_transactionCompletedAndNotWaiting (~io_waiting & combComplete),
    .io_stateStoppedAndWaiting
      (activeFsm_io_stateStoppedAndWaiting_REG == 3'h5 & io_waiting),
    .io_active                            (_activeFsm_io_active)
  );
  assign io_state = state;
  assign io_shift =
    (io_shiftOffset
       ? _counter_io_clockCounter == {1'h0, io_clocksPerBit[20:1]}
       : _counter_io_clockCounter == _whenShift_T_2
         & (_counter_io_bitCounter != io_numOutputBits | io_clocksPerBit == 21'h1))
    & _activeFsm_io_active & state != 3'h2 & (|prevState) & prevState != 3'h1;
  assign io_complete = combComplete;
  assign io_nextTransaction = io_nextTransaction_0;
endmodule

module Divider(
  input         clock,
                reset,
  input  [31:0] io_numerator,
                io_denominator,
  input         io_start,
  output [31:0] io_result,
  output        io_valid
);

  reg         prevStart;
  reg  [31:0] quotient;
  reg  [31:0] remainder;
  reg  [5:0]  counter;
  reg         busy;
  wire        _GEN = io_start & ~busy;
  wire [5:0]  _counter_T = counter - 6'h1;
  wire [94:0] shiftedDenom = {63'h0, io_denominator} << _counter_T;
  wire [63:0] _quotient_T_2 = 64'h1 << _counter_T;
  always @(posedge clock) begin
    prevStart <= io_start;
    if (reset) begin
      quotient <= 32'h0;
      remainder <= 32'h0;
      counter <= 6'h0;
      busy <= 1'h0;
    end
    else begin
      if (busy & (|counter) & {63'h0, remainder} >= shiftedDenom) begin
        quotient <= quotient | _quotient_T_2[31:0];
        remainder <= remainder - shiftedDenom[31:0];
      end
      else if (_GEN) begin
        quotient <= 32'h0;
        remainder <= io_numerator;
      end
      if (busy & (|counter))
        counter <= _counter_T;
      else if (_GEN)
        counter <= 6'h20;
      busy <= (~busy | (|counter)) & (_GEN | busy);
    end
  end // always @(posedge)
  assign io_result = quotient;
  assign io_valid = ~busy & ~(io_start & ~prevStart);
endmodule

module UartBaudRateGenerator(
  input         clock,
                reset,
  input  [31:0] io_desiredBaud,
  input         io_update,
  input  [31:0] io_clkFreq,
  output [31:0] io_clocksPerBit,
  output        io_valid
);

  wire [31:0] _divider_io_result;
  wire        _divider_io_valid;
  reg         state;
  reg  [31:0] updatedClocksPerBit;
  reg  [31:0] numeratorReg;
  reg  [31:0] denominatorReg;
  wire [31:0] _GEN = {1'h0, io_desiredBaud[31:1]};
  always @(posedge clock) begin
    if (reset) begin
      state <= 1'h0;
      updatedClocksPerBit <= 32'h0;
      numeratorReg <= 32'h0;
      denominatorReg <= 32'h0;
    end
    else begin
      if (state)
        state <= ~_divider_io_valid & state;
      else
        state <= io_update | state;
      if (state & _divider_io_valid)
        updatedClocksPerBit <= _divider_io_result;
      if (state) begin
        if (_divider_io_valid) begin
          numeratorReg <= 32'h0;
          denominatorReg <= 32'h0;
        end
      end
      else if (io_update & ~state) begin
        numeratorReg <= io_clkFreq;
        denominatorReg <= _GEN;
      end
    end
  end // always @(posedge)
  Divider divider (
    .clock          (clock),
    .reset          (reset),
    .io_numerator   (state ? numeratorReg : io_clkFreq),
    .io_denominator (state ? denominatorReg : _GEN),
    .io_start       (~state & io_update),
    .io_result      (_divider_io_result),
    .io_valid       (_divider_io_valid)
  );
  assign io_clocksPerBit = updatedClocksPerBit;
  assign io_valid = _divider_io_valid;
endmodule

module DynamicFifoMem(
  input        clock,
               reset,
               io_writeEnable,
  input  [2:0] io_readAddress,
               io_writeAddress,
  input  [8:0] io_writeData,
  output [8:0] io_readData
);

  reg [8:0] mem_0;
  reg [8:0] mem_1;
  reg [8:0] mem_2;
  reg [8:0] mem_3;
  reg [8:0] mem_4;
  reg [8:0] mem_5;
  reg [8:0] mem_6;
  reg [8:0] mem_7;
  reg [8:0] casez_tmp;
  always_comb begin
    casez (io_readAddress)
      3'b000:
        casez_tmp = mem_0;
      3'b001:
        casez_tmp = mem_1;
      3'b010:
        casez_tmp = mem_2;
      3'b011:
        casez_tmp = mem_3;
      3'b100:
        casez_tmp = mem_4;
      3'b101:
        casez_tmp = mem_5;
      3'b110:
        casez_tmp = mem_6;
      default:
        casez_tmp = mem_7;
    endcase
  end // always_comb
  always @(posedge clock) begin
    if (reset) begin
      mem_0 <= 9'h0;
      mem_1 <= 9'h0;
      mem_2 <= 9'h0;
      mem_3 <= 9'h0;
      mem_4 <= 9'h0;
      mem_5 <= 9'h0;
      mem_6 <= 9'h0;
      mem_7 <= 9'h0;
    end
    else begin
      if (io_writeEnable & io_writeAddress == 3'h0)
        mem_0 <= io_writeData;
      if (io_writeEnable & io_writeAddress == 3'h1)
        mem_1 <= io_writeData;
      if (io_writeEnable & io_writeAddress == 3'h2)
        mem_2 <= io_writeData;
      if (io_writeEnable & io_writeAddress == 3'h3)
        mem_3 <= io_writeData;
      if (io_writeEnable & io_writeAddress == 3'h4)
        mem_4 <= io_writeData;
      if (io_writeEnable & io_writeAddress == 3'h5)
        mem_5 <= io_writeData;
      if (io_writeEnable & io_writeAddress == 3'h6)
        mem_6 <= io_writeData;
      if (io_writeEnable & (&io_writeAddress))
        mem_7 <= io_writeData;
    end
  end // always @(posedge)
  assign io_readData = casez_tmp;
endmodule

module DynamicFifo(
  input        clock,
               reset,
               io_push,
               io_pop,
  input  [8:0] io_dataIn,
  output [8:0] io_dataOut,
  output       io_empty,
               io_full,
               io_almostEmpty,
               io_almostFull,
  input  [3:0] io_almostEmptyLevel,
               io_almostFullLevel
);

  reg  [3:0] head;
  reg  [3:0] tail;
  reg  [3:0] count;
  wire       pushValid = io_push & count != 4'h8;
  wire       popValid = io_pop & (|count);
  always @(posedge clock) begin
    if (reset) begin
      head <= 4'h0;
      tail <= 4'h0;
      count <= 4'h0;
    end
    else begin
      if (pushValid) begin
        if (head == 4'h7)
          head <= 4'h0;
        else
          head <= head + 4'h1;
      end
      if (popValid) begin
        if (tail == 4'h7)
          tail <= 4'h0;
        else
          tail <= tail + 4'h1;
      end
      if (~(pushValid & popValid)) begin
        if (pushValid & ~popValid)
          count <= count + 4'h1;
        else if (~pushValid & popValid)
          count <= count - 4'h1;
      end
    end
  end // always @(posedge)
  DynamicFifoMem fifoMemory (
    .clock           (clock),
    .reset           (reset),
    .io_writeEnable  (pushValid),
    .io_readAddress  (tail[2:0]),
    .io_writeAddress (pushValid ? head[2:0] : 3'h0),
    .io_writeData    (io_dataIn),
    .io_readData     (io_dataOut)
  );
  assign io_empty = count == 4'h0;
  assign io_full = count == 4'h8;
  assign io_almostEmpty = count <= io_almostEmptyLevel;
  assign io_almostFull = count >= io_almostFullLevel;
endmodule

module UartRx(
  input         clock,
                reset,
                io_rx,
  output [8:0]  io_data,
  output [2:0]  io_error,
  input  [20:0] io_rxConfig_baud,
                io_rxConfig_clockFreq,
  input         io_rxConfig_updateBaud,
  input  [4:0]  io_rxConfig_numOutputBitsDb,
  input         io_rxConfig_useParityDb,
                io_rxConfig_parityOddDb,
                io_rxConfig_clearErrorDb,
                io_rxConfig_rxDataRegRead,
  input  [4:0]  io_rxConfig_almostEmptyLevel,
                io_rxConfig_almostFullLevel,
  input         io_rxConfig_lsbFirst,
  output [20:0] io_clocksPerBit,
  output        io_fifoBundle_full,
                io_fifoBundle_empty,
                io_fifoBundle_almostEmpty,
                io_fifoBundle_almostFull
);

  wire        lsbFirstNext;
  wire        _fifo_io_empty;
  wire        _fifo_io_full;
  wire [31:0] _baudGen_io_clocksPerBit;
  wire        _baudGen_io_valid;
  wire [2:0]  _uartFsm_io_state;
  wire        _uartFsm_io_shift;
  wire        _uartFsm_io_complete;
  reg  [31:0] rxSyncRegs;
  reg  [20:0] clocksPerBitReg;
  reg  [4:0]  numOutputBitsReg;
  reg         useParityReg;
  reg         parityOddReg;
  reg         clearErrorReg;
  reg         fifoOverflowFlag;
  reg         fifoUnderflowFlag;
  reg  [4:0]  numOutputBitsDbReg;
  reg         useParityDbReg;
  reg         parityOddDbReg;
  reg         clearErrorDbReg;
  wire        shiftData = _uartFsm_io_shift & _uartFsm_io_state == 3'h3;
  wire        shiftParity = _uartFsm_io_shift & _uartFsm_io_state == 3'h4;
  reg  [2:0]  uartFsm_io_waiting_REG;
  reg  [2:0]  startTransaction_REG;
  reg  [2:0]  baudGen_io_update_REG;
  reg  [8:0]  dataShiftReg;
  reg  [8:0]  dataReg;
  reg  [2:0]  errorReg;
  reg         lsbFirstReg;
  reg  [4:0]  almostFullLevelReg;
  wire        _clearErrorNext_T = _uartFsm_io_state == 3'h0;
  wire        _clearErrorNext_T_1 = _uartFsm_io_state == 3'h1;
  reg  [4:0]  almostEmptyLevelReg;
  wire        _fifo_io_push_T = errorReg == 3'h0;
  wire        _GEN = _uartFsm_io_complete & _fifo_io_push_T & _fifo_io_full;
  wire        _GEN_0 = io_rxConfig_rxDataRegRead & _fifo_io_empty;
  reg         REG;
  reg         REG_1;
  reg         newFifoDataRead;
  reg         newFifoDataRead_REG;
  reg         newFifoDataReadOver;
  reg         newFifoDataReadOver_REG;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & lsbFirstNext != lsbFirstReg & ~reset)
        $fwrite(32'h80000002, "[UartRx DEBUG] lsbFirst changed: from %d to %d\n",
                lsbFirstReg, lsbFirstNext);
      if ((`PRINTF_COND_) & clearErrorDbReg & ~reset)
        $fwrite(32'h80000002, "[UartRx DEBUG] Clearing all error flags\n");
      if ((`PRINTF_COND_) & _GEN & ~reset)
        $fwrite(32'h80000002,
                "[UartRx DEBUG] Setting FIFO overflow flag - push to full FIFO\n");
      if ((`PRINTF_COND_) & _GEN_0 & ~reset)
        $fwrite(32'h80000002,
                "[UartRx DEBUG] Setting FIFO underflow flag - pop from empty FIFO\n");
      if ((`PRINTF_COND_) & fifoOverflowFlag != REG & ~reset)
        $fwrite(32'h80000002, "[UartRx DEBUG] FIFO overflow flag changed to %d\n",
                fifoOverflowFlag);
      if ((`PRINTF_COND_) & fifoUnderflowFlag != REG_1 & ~reset)
        $fwrite(32'h80000002, "[UartRx DEBUG] FIFO underflow flag changed to %d\n",
                fifoUnderflowFlag);
      if ((`PRINTF_COND_) & newFifoDataRead & ~reset)
        $fwrite(32'h80000002, "[UartRx DEBUG] New read from FIFO\n");
      if ((`PRINTF_COND_) & newFifoDataReadOver & ~reset)
        $fwrite(32'h80000002, "[UartRx DEBUG] Read from FIFO completed\n");
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _lsbFirstNext_T_2 = _clearErrorNext_T | _clearErrorNext_T_1;
  assign lsbFirstNext = _lsbFirstNext_T_2 ? io_rxConfig_lsbFirst : lsbFirstReg;
  wire [8:0]  _dataShiftNext_dataShiftNext_T_1 = {dataShiftReg[7:0], rxSyncRegs[31]};
  wire [8:0]  _GEN_1 =
    lsbFirstReg
      ? (numOutputBitsReg == 5'h9
           ? {dataShiftReg[0],
              dataShiftReg[1],
              dataShiftReg[2],
              dataShiftReg[3],
              dataShiftReg[4],
              dataShiftReg[5],
              dataShiftReg[6],
              dataShiftReg[7],
              dataShiftReg[8]}
           : numOutputBitsReg == 5'h8
               ? {1'h0,
                  dataShiftReg[0],
                  dataShiftReg[1],
                  dataShiftReg[2],
                  dataShiftReg[3],
                  dataShiftReg[4],
                  dataShiftReg[5],
                  dataShiftReg[6],
                  dataShiftReg[7]}
               : numOutputBitsReg == 5'h7
                   ? {2'h0,
                      dataShiftReg[0],
                      dataShiftReg[1],
                      dataShiftReg[2],
                      dataShiftReg[3],
                      dataShiftReg[4],
                      dataShiftReg[5],
                      dataShiftReg[6]}
                   : numOutputBitsReg == 5'h6
                       ? {3'h0,
                          dataShiftReg[0],
                          dataShiftReg[1],
                          dataShiftReg[2],
                          dataShiftReg[3],
                          dataShiftReg[4],
                          dataShiftReg[5]}
                       : numOutputBitsReg == 5'h5
                           ? {4'h0,
                              dataShiftReg[0],
                              dataShiftReg[1],
                              dataShiftReg[2],
                              dataShiftReg[3],
                              dataShiftReg[4]}
                           : numOutputBitsReg == 5'h4
                               ? {5'h0,
                                  dataShiftReg[0],
                                  dataShiftReg[1],
                                  dataShiftReg[2],
                                  dataShiftReg[3]}
                               : numOutputBitsReg == 5'h3
                                   ? {6'h0,
                                      dataShiftReg[0],
                                      dataShiftReg[1],
                                      dataShiftReg[2]}
                                   : numOutputBitsReg == 5'h2
                                       ? {7'h0, dataShiftReg[0], dataShiftReg[1]}
                                       : numOutputBitsReg == 5'h1
                                           ? {8'h0, dataShiftReg[0]}
                                           : 9'h0)
      : dataShiftReg;
  always @(posedge clock) begin
    if (reset) begin
      rxSyncRegs <= 32'hFFFFFFFF;
      clocksPerBitReg <= 21'h0;
      numOutputBitsReg <= 5'h0;
      useParityReg <= 1'h0;
      parityOddReg <= 1'h0;
      clearErrorReg <= 1'h0;
      fifoOverflowFlag <= 1'h0;
      fifoUnderflowFlag <= 1'h0;
      numOutputBitsDbReg <= 5'h0;
      useParityDbReg <= 1'h0;
      parityOddDbReg <= 1'h0;
      clearErrorDbReg <= 1'h0;
      dataShiftReg <= 9'h0;
      dataReg <= 9'h0;
      errorReg <= 3'h0;
      lsbFirstReg <= 1'h0;
      almostFullLevelReg <= 5'h0;
      almostEmptyLevelReg <= 5'h0;
      newFifoDataRead <= 1'h0;
      newFifoDataReadOver <= 1'h0;
    end
    else begin
      rxSyncRegs <= {rxSyncRegs[30:0], io_rx};
      clocksPerBitReg <= _baudGen_io_clocksPerBit[20:0];
      if (_clearErrorNext_T | _clearErrorNext_T_1)
        numOutputBitsReg <= numOutputBitsDbReg;
      if (_clearErrorNext_T | _clearErrorNext_T_1)
        useParityReg <= useParityDbReg;
      if (_clearErrorNext_T | _clearErrorNext_T_1)
        parityOddReg <= parityOddDbReg;
      if (_clearErrorNext_T | _clearErrorNext_T_1)
        clearErrorReg <= clearErrorDbReg;
      fifoOverflowFlag <= _GEN | ~clearErrorDbReg & fifoOverflowFlag;
      fifoUnderflowFlag <= _GEN_0 | ~clearErrorDbReg & fifoUnderflowFlag;
      numOutputBitsDbReg <= io_rxConfig_numOutputBitsDb;
      useParityDbReg <= io_rxConfig_useParityDb;
      parityOddDbReg <= io_rxConfig_parityOddDb;
      clearErrorDbReg <= io_rxConfig_clearErrorDb;
      if (_uartFsm_io_complete) begin
        dataShiftReg <= 9'h0;
        dataReg <= _GEN_1;
      end
      else if (shiftData)
        dataShiftReg <= _dataShiftNext_dataShiftNext_T_1;
      if (clearErrorDbReg)
        errorReg <= 3'h0;
      else if (_uartFsm_io_state == 3'h5) begin
        if (_uartFsm_io_shift & _uartFsm_io_state == 3'h5 & ~(rxSyncRegs[31]))
          errorReg <= 3'h2;
        else if (clearErrorReg)
          errorReg <= 3'h0;
      end
      else if (~(_uartFsm_io_state == 3'h4 & shiftParity & useParityReg)
               | rxSyncRegs[31] == (shiftParity
                                    & (^(~shiftParity | _uartFsm_io_complete
                                           ? 9'h0
                                           : shiftData
                                               ? _dataShiftNext_dataShiftNext_T_1
                                               : dataShiftReg) ^ parityOddReg))) begin
        if (clearErrorReg)
          errorReg <= 3'h0;
      end
      else
        errorReg <= 3'h3;
      if (_lsbFirstNext_T_2)
        lsbFirstReg <= io_rxConfig_lsbFirst;
      if (_clearErrorNext_T | _clearErrorNext_T_1)
        almostFullLevelReg <= io_rxConfig_almostFullLevel;
      if (_clearErrorNext_T | _clearErrorNext_T_1)
        almostEmptyLevelReg <= io_rxConfig_almostEmptyLevel;
      newFifoDataRead <= io_rxConfig_rxDataRegRead & ~newFifoDataRead_REG;
      newFifoDataReadOver <= ~newFifoDataRead & newFifoDataReadOver_REG;
    end
    uartFsm_io_waiting_REG <= _uartFsm_io_state;
    startTransaction_REG <= _uartFsm_io_state;
    baudGen_io_update_REG <= _uartFsm_io_state;
    REG <= fifoOverflowFlag;
    REG_1 <= fifoUnderflowFlag;
    newFifoDataRead_REG <= io_rxConfig_rxDataRegRead;
    newFifoDataReadOver_REG <= newFifoDataRead;
  end // always @(posedge)
  UartFsm uartFsm (
    .clock               (clock),
    .reset               (reset),
    .io_startTransaction (~(rxSyncRegs[31]) & startTransaction_REG == 3'h0),
    .io_shiftOffset      (1'h1),
    .io_waiting          (uartFsm_io_waiting_REG == 3'h5 & ~(rxSyncRegs[31])),
    .io_clocksPerBit     (clocksPerBitReg),
    .io_numOutputBits    (numOutputBitsReg),
    .io_useParity        (useParityReg),
    .io_updateBaud       (io_rxConfig_updateBaud),
    .io_baudValid        (_baudGen_io_valid),
    .io_state            (_uartFsm_io_state),
    .io_shift            (_uartFsm_io_shift),
    .io_complete         (_uartFsm_io_complete),
    .io_nextTransaction  (/* unused */)
  );
  UartBaudRateGenerator baudGen (
    .clock           (clock),
    .reset           (reset),
    .io_desiredBaud  ({11'h0, io_rxConfig_baud}),
    .io_update       (baudGen_io_update_REG == 3'h1),
    .io_clkFreq      ({11'h0, io_rxConfig_clockFreq}),
    .io_clocksPerBit (_baudGen_io_clocksPerBit),
    .io_valid        (_baudGen_io_valid)
  );
  DynamicFifo fifo (
    .clock               (clock),
    .reset               (reset),
    .io_push             (_uartFsm_io_complete & _fifo_io_push_T),
    .io_pop              (newFifoDataReadOver & ~_fifo_io_empty),
    .io_dataIn           (_uartFsm_io_complete ? _GEN_1 : dataReg),
    .io_dataOut          (io_data),
    .io_empty            (_fifo_io_empty),
    .io_full             (_fifo_io_full),
    .io_almostEmpty      (io_fifoBundle_almostEmpty),
    .io_almostFull       (io_fifoBundle_almostFull),
    .io_almostEmptyLevel (almostEmptyLevelReg[3:0]),
    .io_almostFullLevel  (almostFullLevelReg[3:0])
  );
  assign io_error = fifoOverflowFlag ? 3'h5 : fifoUnderflowFlag ? 3'h4 : errorReg;
  assign io_clocksPerBit = clocksPerBitReg;
  assign io_fifoBundle_full = _fifo_io_full;
  assign io_fifoBundle_empty = _fifo_io_empty;
endmodule

module UartTx(
  input         clock,
                reset,
                io_txConfig_load,
  input  [8:0]  io_txConfig_data,
  input  [4:0]  io_txConfig_numOutputBitsDb,
  input         io_txConfig_useParityDb,
                io_txConfig_parityOddDb,
  input  [20:0] io_txConfig_baud,
                io_txConfig_clockFreq,
  input         io_txConfig_updateBaud,
                io_txConfig_clearErrorDb,
                io_txConfig_txDataRegWrite,
  input  [4:0]  io_txConfig_almostEmptyLevel,
                io_txConfig_almostFullLevel,
  input         io_txConfig_lsbFirst,
  output [20:0] io_clocksPerBit,
  output        io_tx,
  output [2:0]  io_error,
  output        io_fifoBundle_full,
                io_fifoBundle_empty,
                io_fifoBundle_almostEmpty,
                io_fifoBundle_almostFull
);

  wire        lsbFirstNext;
  wire [8:0]  _fifo_io_dataOut;
  wire        _fifo_io_empty;
  wire        _fifo_io_full;
  wire [31:0] _baudGen_io_clocksPerBit;
  wire        _baudGen_io_valid;
  wire [2:0]  _uartFsm_io_state;
  wire        _uartFsm_io_shift;
  wire        _uartFsm_io_nextTransaction;
  reg  [20:0] clocksPerBitReg;
  reg  [4:0]  numOutputBitsReg;
  reg         useParityReg;
  reg         parityOddReg;
  reg  [4:0]  numOutputBitsDbReg;
  reg         useParityDbReg;
  reg         parityOddDbReg;
  reg         clearErrorDbReg;
  reg         lsbFirstReg;
  reg  [2:0]  txErrorReg;
  reg  [2:0]  startTransaction_REG;
  reg  [2:0]  baudGen_io_update_REG;
  reg  [8:0]  txParityData;
  reg  [8:0]  dataShiftReg;
  reg  [4:0]  almostFullLevelReg;
  wire        _parityOddNext_T_1 = _uartFsm_io_state == 3'h1;
  reg  [4:0]  almostEmptyLevelReg;
  reg  [2:0]  REG;
  reg  [2:0]  REG_1;
  reg         fifo_io_push_REG;
  wire        _GEN = _fifo_io_full & fifo_io_push_REG;
  wire        _GEN_0 = _fifo_io_empty & _uartFsm_io_nextTransaction;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & io_txConfig_load & ~reset)
        $fwrite(32'h80000002, "[UartTx DEBUG] Loading data: %d\n", io_txConfig_data);
      if ((`PRINTF_COND_) & lsbFirstNext != lsbFirstReg & ~reset)
        $fwrite(32'h80000002, "[UartTx DEBUG] lsbFirst changed: from %d to %d\n",
                lsbFirstReg, lsbFirstNext);
      if ((`PRINTF_COND_) & txErrorReg != REG & ~reset)
        $fwrite(32'h80000002, "[UartTx DEBUG] Error state changed: from %d to %d\n",
                REG_1, txErrorReg);
      if ((`PRINTF_COND_) & _GEN & ~reset)
        $fwrite(32'h80000002, "[UartTx DEBUG] Setting overflow error - FIFO full\n");
      if ((`PRINTF_COND_) & ~_GEN & _GEN_0 & ~reset)
        $fwrite(32'h80000002, "[UartTx DEBUG] Setting underflow error - FIFO empty\n");
      if ((`PRINTF_COND_) & ~_GEN & ~_GEN_0 & io_txConfig_clearErrorDb & ~reset)
        $fwrite(32'h80000002, "[UartTx DEBUG] Clearing error after completion\n");
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _lsbFirstNext_T_2 = ~(|_uartFsm_io_state) | _parityOddNext_T_1;
  assign lsbFirstNext = _lsbFirstNext_T_2 ? io_txConfig_lsbFirst : lsbFirstReg;
  always @(posedge clock) begin
    if (reset) begin
      clocksPerBitReg <= 21'h0;
      numOutputBitsReg <= 5'h0;
      useParityReg <= 1'h0;
      parityOddReg <= 1'h0;
      numOutputBitsDbReg <= 5'h0;
      useParityDbReg <= 1'h0;
      parityOddDbReg <= 1'h0;
      clearErrorDbReg <= 1'h0;
      lsbFirstReg <= 1'h0;
      txErrorReg <= 3'h0;
      txParityData <= 9'h0;
      dataShiftReg <= 9'h0;
      almostFullLevelReg <= 5'h0;
      almostEmptyLevelReg <= 5'h0;
    end
    else begin
      clocksPerBitReg <= _baudGen_io_clocksPerBit[20:0];
      if (~(|_uartFsm_io_state) | _parityOddNext_T_1)
        numOutputBitsReg <= numOutputBitsDbReg;
      if (~(|_uartFsm_io_state) | _parityOddNext_T_1)
        useParityReg <= useParityDbReg;
      if (~(|_uartFsm_io_state) | _parityOddNext_T_1)
        parityOddReg <= parityOddDbReg;
      numOutputBitsDbReg <= io_txConfig_numOutputBitsDb;
      useParityDbReg <= io_txConfig_useParityDb;
      parityOddDbReg <= io_txConfig_parityOddDb;
      clearErrorDbReg <= io_txConfig_clearErrorDb;
      if (_lsbFirstNext_T_2)
        lsbFirstReg <= io_txConfig_lsbFirst;
      if (_GEN)
        txErrorReg <= 3'h4;
      else if (_GEN_0)
        txErrorReg <= 3'h3;
      else if (io_txConfig_clearErrorDb | clearErrorDbReg)
        txErrorReg <= 3'h0;
      if (_uartFsm_io_nextTransaction)
        txParityData <= _fifo_io_dataOut;
      if (_uartFsm_io_shift & _uartFsm_io_state == 3'h3 | _uartFsm_io_shift
          & _uartFsm_io_state == 3'h4)
        dataShiftReg <= {1'h0, dataShiftReg[8:1]};
      else if (_uartFsm_io_nextTransaction)
        dataShiftReg <=
          lsbFirstReg
            ? _fifo_io_dataOut
            : numOutputBitsReg == 5'h9
                ? {_fifo_io_dataOut[0],
                   _fifo_io_dataOut[1],
                   _fifo_io_dataOut[2],
                   _fifo_io_dataOut[3],
                   _fifo_io_dataOut[4],
                   _fifo_io_dataOut[5],
                   _fifo_io_dataOut[6],
                   _fifo_io_dataOut[7],
                   _fifo_io_dataOut[8]}
                : numOutputBitsReg == 5'h8
                    ? {1'h0,
                       _fifo_io_dataOut[0],
                       _fifo_io_dataOut[1],
                       _fifo_io_dataOut[2],
                       _fifo_io_dataOut[3],
                       _fifo_io_dataOut[4],
                       _fifo_io_dataOut[5],
                       _fifo_io_dataOut[6],
                       _fifo_io_dataOut[7]}
                    : numOutputBitsReg == 5'h7
                        ? {2'h0,
                           _fifo_io_dataOut[0],
                           _fifo_io_dataOut[1],
                           _fifo_io_dataOut[2],
                           _fifo_io_dataOut[3],
                           _fifo_io_dataOut[4],
                           _fifo_io_dataOut[5],
                           _fifo_io_dataOut[6]}
                        : numOutputBitsReg == 5'h6
                            ? {3'h0,
                               _fifo_io_dataOut[0],
                               _fifo_io_dataOut[1],
                               _fifo_io_dataOut[2],
                               _fifo_io_dataOut[3],
                               _fifo_io_dataOut[4],
                               _fifo_io_dataOut[5]}
                            : numOutputBitsReg == 5'h5
                                ? {4'h0,
                                   _fifo_io_dataOut[0],
                                   _fifo_io_dataOut[1],
                                   _fifo_io_dataOut[2],
                                   _fifo_io_dataOut[3],
                                   _fifo_io_dataOut[4]}
                                : numOutputBitsReg == 5'h4
                                    ? {5'h0,
                                       _fifo_io_dataOut[0],
                                       _fifo_io_dataOut[1],
                                       _fifo_io_dataOut[2],
                                       _fifo_io_dataOut[3]}
                                    : numOutputBitsReg == 5'h3
                                        ? {6'h0,
                                           _fifo_io_dataOut[0],
                                           _fifo_io_dataOut[1],
                                           _fifo_io_dataOut[2]}
                                        : numOutputBitsReg == 5'h2
                                            ? {7'h0,
                                               _fifo_io_dataOut[0],
                                               _fifo_io_dataOut[1]}
                                            : numOutputBitsReg == 5'h1
                                                ? {8'h0, _fifo_io_dataOut[0]}
                                                : 9'h0;
      if (~(|_uartFsm_io_state) | _parityOddNext_T_1)
        almostFullLevelReg <= io_txConfig_almostFullLevel;
      if (~(|_uartFsm_io_state) | _parityOddNext_T_1)
        almostEmptyLevelReg <= io_txConfig_almostEmptyLevel;
    end
    startTransaction_REG <= _uartFsm_io_state;
    baudGen_io_update_REG <= _uartFsm_io_state;
    REG <= txErrorReg;
    REG_1 <= txErrorReg;
    fifo_io_push_REG <= io_txConfig_txDataRegWrite;
  end // always @(posedge)
  UartFsm uartFsm (
    .clock               (clock),
    .reset               (reset),
    .io_startTransaction (startTransaction_REG == 3'h0 & io_txConfig_load),
    .io_shiftOffset      (1'h0),
    .io_waiting          (~_fifo_io_empty),
    .io_clocksPerBit     (clocksPerBitReg),
    .io_numOutputBits    (numOutputBitsReg),
    .io_useParity        (useParityReg),
    .io_updateBaud       (io_txConfig_updateBaud),
    .io_baudValid        (_baudGen_io_valid),
    .io_state            (_uartFsm_io_state),
    .io_shift            (_uartFsm_io_shift),
    .io_complete         (/* unused */),
    .io_nextTransaction  (_uartFsm_io_nextTransaction)
  );
  UartBaudRateGenerator baudGen (
    .clock           (clock),
    .reset           (reset),
    .io_desiredBaud  ({11'h0, io_txConfig_baud}),
    .io_update       (baudGen_io_update_REG == 3'h1),
    .io_clkFreq      ({11'h0, io_txConfig_clockFreq}),
    .io_clocksPerBit (_baudGen_io_clocksPerBit),
    .io_valid        (_baudGen_io_valid)
  );
  DynamicFifo fifo (
    .clock               (clock),
    .reset               (reset),
    .io_push             (fifo_io_push_REG),
    .io_pop              (_uartFsm_io_nextTransaction),
    .io_dataIn           (io_txConfig_data),
    .io_dataOut          (_fifo_io_dataOut),
    .io_empty            (_fifo_io_empty),
    .io_full             (_fifo_io_full),
    .io_almostEmpty      (io_fifoBundle_almostEmpty),
    .io_almostFull       (io_fifoBundle_almostFull),
    .io_almostEmptyLevel (almostEmptyLevelReg[3:0]),
    .io_almostFullLevel  (almostFullLevelReg[3:0])
  );
  assign io_clocksPerBit = clocksPerBitReg;
  assign io_tx =
    ~(|_uartFsm_io_state) | _uartFsm_io_state == 3'h1 | _uartFsm_io_state != 3'h2
    & (_uartFsm_io_state == 3'h3
         ? dataShiftReg[0]
         : _uartFsm_io_state != 3'h4 | ^txParityData ^ parityOddReg);
  assign io_error = txErrorReg;
  assign io_fifoBundle_full = _fifo_io_full;
  assign io_fifoBundle_empty = _fifo_io_empty;
endmodule

module UartInner(
  input         clock,
                reset,
                io_rx,
  output [8:0]  io_dataOut,
  output [2:0]  io_error_rxError,
                io_error_txError,
  input         io_txControlBundle_load,
  input  [8:0]  io_txControlBundle_data,
  input  [4:0]  io_txControlBundle_numOutputBitsDb,
  input         io_txControlBundle_useParityDb,
                io_txControlBundle_parityOddDb,
  input  [20:0] io_txControlBundle_baud,
                io_txControlBundle_clockFreq,
  input         io_txControlBundle_updateBaud,
                io_txControlBundle_clearErrorDb,
                io_txControlBundle_txDataRegWrite,
  input  [4:0]  io_txControlBundle_almostEmptyLevel,
                io_txControlBundle_almostFullLevel,
  input         io_txControlBundle_lsbFirst,
  input  [20:0] io_rxControlBundle_baud,
                io_rxControlBundle_clockFreq,
  input         io_rxControlBundle_updateBaud,
  input  [4:0]  io_rxControlBundle_numOutputBitsDb,
  input         io_rxControlBundle_useParityDb,
                io_rxControlBundle_parityOddDb,
                io_rxControlBundle_clearErrorDb,
                io_rxControlBundle_rxDataRegRead,
  input  [4:0]  io_rxControlBundle_almostEmptyLevel,
                io_rxControlBundle_almostFullLevel,
  input         io_rxControlBundle_lsbFirst,
  output        io_rxFifoStatus_full,
                io_rxFifoStatus_empty,
                io_rxFifoStatus_almostEmpty,
                io_rxFifoStatus_almostFull,
                io_txFifoStatus_full,
                io_txFifoStatus_empty,
                io_txFifoStatus_almostEmpty,
                io_txFifoStatus_almostFull,
                io_tx,
  output [20:0] io_rxClocksPerBit,
                io_txClocksPerBit
);

  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & io_txControlBundle_load & ~reset)
        $fwrite(32'h80000002, "[UartInner.scala DEBUG] TX loading data=%d\n",
                io_txControlBundle_data);
    end // always @(posedge)
  `endif // not def SYNTHESIS
  UartRx rxModule (
    .clock                        (clock),
    .reset                        (reset),
    .io_rx                        (io_rx),
    .io_data                      (io_dataOut),
    .io_error                     (io_error_rxError),
    .io_rxConfig_baud             (io_rxControlBundle_baud),
    .io_rxConfig_clockFreq        (io_rxControlBundle_clockFreq),
    .io_rxConfig_updateBaud       (io_rxControlBundle_updateBaud),
    .io_rxConfig_numOutputBitsDb  (io_rxControlBundle_numOutputBitsDb),
    .io_rxConfig_useParityDb      (io_rxControlBundle_useParityDb),
    .io_rxConfig_parityOddDb      (io_rxControlBundle_parityOddDb),
    .io_rxConfig_clearErrorDb     (io_rxControlBundle_clearErrorDb),
    .io_rxConfig_rxDataRegRead    (io_rxControlBundle_rxDataRegRead),
    .io_rxConfig_almostEmptyLevel (io_rxControlBundle_almostEmptyLevel),
    .io_rxConfig_almostFullLevel  (io_rxControlBundle_almostFullLevel),
    .io_rxConfig_lsbFirst         (io_rxControlBundle_lsbFirst),
    .io_clocksPerBit              (io_rxClocksPerBit),
    .io_fifoBundle_full           (io_rxFifoStatus_full),
    .io_fifoBundle_empty          (io_rxFifoStatus_empty),
    .io_fifoBundle_almostEmpty    (io_rxFifoStatus_almostEmpty),
    .io_fifoBundle_almostFull     (io_rxFifoStatus_almostFull)
  );
  UartTx txModule (
    .clock                        (clock),
    .reset                        (reset),
    .io_txConfig_load             (io_txControlBundle_load),
    .io_txConfig_data             (io_txControlBundle_data),
    .io_txConfig_numOutputBitsDb  (io_txControlBundle_numOutputBitsDb),
    .io_txConfig_useParityDb      (io_txControlBundle_useParityDb),
    .io_txConfig_parityOddDb      (io_txControlBundle_parityOddDb),
    .io_txConfig_baud             (io_txControlBundle_baud),
    .io_txConfig_clockFreq        (io_txControlBundle_clockFreq),
    .io_txConfig_updateBaud       (io_txControlBundle_updateBaud),
    .io_txConfig_clearErrorDb     (io_txControlBundle_clearErrorDb),
    .io_txConfig_txDataRegWrite   (io_txControlBundle_txDataRegWrite),
    .io_txConfig_almostEmptyLevel (io_txControlBundle_almostEmptyLevel),
    .io_txConfig_almostFullLevel  (io_txControlBundle_almostFullLevel),
    .io_txConfig_lsbFirst         (io_txControlBundle_lsbFirst),
    .io_clocksPerBit              (io_txClocksPerBit),
    .io_tx                        (io_tx),
    .io_error                     (io_error_txError),
    .io_fifoBundle_full           (io_txFifoStatus_full),
    .io_fifoBundle_empty          (io_txFifoStatus_empty),
    .io_fifoBundle_almostEmpty    (io_txFifoStatus_almostEmpty),
    .io_fifoBundle_almostFull     (io_txFifoStatus_almostFull)
  );
endmodule

module Uart(
  input         clock,
                reset,
                io_apb_PSEL,
                io_apb_PENABLE,
                io_apb_PWRITE,
  input  [31:0] io_apb_PADDR,
                io_apb_PWDATA,
  output [31:0] io_apb_PRDATA,
  output        io_apb_PREADY,
                io_apb_PSLVERR,
  input         io_rx,
  output        io_tx
);

  wire [8:0]  _uartInner_io_dataOut;
  wire [2:0]  _uartInner_io_error_rxError;
  wire [2:0]  _uartInner_io_error_txError;
  wire        _uartInner_io_rxFifoStatus_full;
  wire        _uartInner_io_rxFifoStatus_empty;
  wire        _uartInner_io_rxFifoStatus_almostEmpty;
  wire        _uartInner_io_rxFifoStatus_almostFull;
  wire        _uartInner_io_txFifoStatus_full;
  wire        _uartInner_io_txFifoStatus_empty;
  wire        _uartInner_io_txFifoStatus_almostEmpty;
  wire        _uartInner_io_txFifoStatus_almostFull;
  wire [20:0] _uartInner_io_rxClocksPerBit;
  wire [20:0] _uartInner_io_txClocksPerBit;
  wire        _addrDecode_io_sel_0;
  wire        _addrDecode_io_sel_1;
  wire        _addrDecode_io_sel_2;
  wire        _addrDecode_io_sel_3;
  wire        _addrDecode_io_sel_4;
  wire        _addrDecode_io_sel_5;
  wire        _addrDecode_io_sel_6;
  wire        _addrDecode_io_sel_7;
  wire        _addrDecode_io_sel_8;
  wire        _addrDecode_io_sel_9;
  wire        _addrDecode_io_sel_10;
  wire        _addrDecode_io_sel_11;
  wire        _addrDecode_io_sel_12;
  wire        _addrDecode_io_sel_13;
  wire        _addrDecode_io_sel_14;
  wire        _addrDecode_io_sel_15;
  wire        _addrDecode_io_sel_16;
  wire        _addrDecode_io_sel_17;
  wire        _addrDecode_io_sel_18;
  wire        _addrDecode_io_sel_19;
  wire        _addrDecode_io_sel_20;
  wire        _addrDecode_io_sel_21;
  wire        _addrDecode_io_sel_22;
  wire        _addrDecode_io_sel_23;
  wire        _addrDecode_io_sel_24;
  wire        _addrDecode_io_sel_25;
  wire        _addrDecode_io_sel_26;
  wire        _addrDecode_io_sel_27;
  wire        _addrDecode_io_sel_28;
  wire        _addrDecode_io_sel_29;
  wire        _addrDecode_io_sel_30;
  wire        _addrDecode_io_sel_31;
  wire        _addrDecode_io_sel_32;
  wire        _addrDecode_io_sel_33;
  wire [31:0] _addrDecode_io_addrOut;
  wire        _addrDecode_io_errorCode;
  reg         load;
  reg  [8:0]  dataIn;
  reg  [31:0] tx_baud;
  reg  [31:0] tx_clockFreq;
  reg         tx_updateBaud;
  reg  [4:0]  currentBits_5;
  reg         currentBits_6;
  reg         currentBits_7;
  reg  [4:0]  currentBits_8;
  reg  [4:0]  currentBits_9;
  reg         error_topError;
  reg  [2:0]  error_rxError;
  reg  [2:0]  error_txError;
  reg         error_addrDecodeError;
  reg         clearError;
  reg  [31:0] rx_baud;
  reg  [31:0] rx_clockFreq;
  reg         rx_updateBaud;
  reg  [4:0]  currentBits_14;
  reg         rx_useParityDb;
  reg         rx_parityOddDb;
  reg  [4:0]  currentBits_17;
  reg  [4:0]  currentBits_18;
  reg         rxLsbFirst;
  reg         txLsbFirst;
  wire        _addrDecode_io_en_T = io_apb_PSEL & io_apb_PENABLE;
  `ifndef SYNTHESIS
    wire _GEN =
      (|error_rxError) | (|error_txError) | error_topError | error_addrDecodeError;
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & _GEN & ~reset)
        $fwrite(32'h80000002, "[Uart.scala DEBUG] Error detected Bits: %b\n",
                {error_topError, error_rxError, error_txError, error_addrDecodeError});
      if ((`PRINTF_COND_) & _GEN & (|error_rxError) & ~reset)
        $fwrite(32'h80000002, "[Uart.scala DEBUG] RX Error detected: %b\n",
                error_rxError);
      if ((`PRINTF_COND_) & _GEN & (|error_txError) & ~reset)
        $fwrite(32'h80000002, "[Uart.scala DEBUG] TX Error detected: %b\n",
                error_txError);
      if ((`PRINTF_COND_) & _GEN & error_topError & ~reset)
        $fwrite(32'h80000002, "[Uart.scala DEBUG] Top Error detected: %b\n",
                error_topError);
      if ((`PRINTF_COND_) & _GEN & error_addrDecodeError & ~reset)
        $fwrite(32'h80000002, "[Uart.scala DEBUG] AddrDecode Error detected: %b\n",
                error_addrDecodeError);
      if ((`PRINTF_COND_) & clearError & ~reset)
        $fwrite(32'h80000002, "[Uart.scala DEBUG] Clearing error registers\n");
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN_0 = io_apb_PWDATA > 32'hE1000;
  wire        _GEN_1 = _addrDecode_io_sel_2 & _GEN_0;
  wire        _GEN_2 = io_apb_PWDATA > 32'hF4240;
  wire        _GEN_3 =
    _addrDecode_io_sel_3 ? _GEN_2 | _GEN_1 | error_topError : _GEN_1 | error_topError;
  wire        _GEN_4 = io_apb_PWDATA > 32'h9;
  wire        _GEN_5 = _addrDecode_io_sel_5 & _GEN_4;
  wire        _GEN_6 = _addrDecode_io_sel_18 ? _GEN_0 | _GEN_5 | _GEN_3 : _GEN_5 | _GEN_3;
  wire        _GEN_7 = _addrDecode_io_sel_19 & _GEN_2;
  always @(posedge clock) begin
    if (reset) begin
      load <= 1'h0;
      dataIn <= 9'h0;
      tx_baud <= 32'h1C200;
      tx_clockFreq <= 32'h17D7840;
      tx_updateBaud <= 1'h0;
      currentBits_5 <= 5'h8;
      currentBits_6 <= 1'h0;
      currentBits_7 <= 1'h0;
      currentBits_8 <= 5'h1;
      currentBits_9 <= 5'h7;
      error_topError <= 1'h0;
      error_rxError <= 3'h0;
      error_txError <= 3'h0;
      error_addrDecodeError <= 1'h0;
      clearError <= 1'h0;
      rx_baud <= 32'h1C200;
      rx_clockFreq <= 32'h17D7840;
      rx_updateBaud <= 1'h0;
      currentBits_14 <= 5'h8;
      rx_useParityDb <= 1'h0;
      rx_parityOddDb <= 1'h0;
      currentBits_17 <= 5'h1;
      currentBits_18 <= 5'h7;
      rxLsbFirst <= 1'h1;
      txLsbFirst <= 1'h1;
    end
    else begin
      load <=
        ~load
        & (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_0)
           | (|(_addrDecode_io_addrOut[31:2]))
             ? load
             : io_apb_PWDATA[0]);
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_1)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        dataIn <= io_apb_PWDATA[8:0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_2)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        tx_baud <= io_apb_PWDATA;
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_3)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        tx_clockFreq <= io_apb_PWDATA;
      tx_updateBaud <=
        ~tx_updateBaud
        & (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_4)
           | (|(_addrDecode_io_addrOut[31:2]))
             ? tx_updateBaud
             : io_apb_PWDATA[0]);
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_5)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        currentBits_5 <= io_apb_PWDATA[4:0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_6)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        currentBits_6 <= io_apb_PWDATA[0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_7)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        currentBits_7 <= io_apb_PWDATA[0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_8)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        currentBits_8 <= io_apb_PWDATA[4:0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_9)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        currentBits_9 <= io_apb_PWDATA[4:0];
      error_topError <=
        ~clearError
        & (_addrDecode_io_en_T
             ? (_addrDecode_io_sel_21 ? _GEN_4 | _GEN_7 | _GEN_6 : _GEN_7 | _GEN_6)
             : error_topError);
      error_rxError <= clearError ? 3'h0 : _uartInner_io_error_rxError;
      error_txError <= clearError ? 3'h0 : _uartInner_io_error_txError;
      error_addrDecodeError <= _addrDecode_io_errorCode;
      clearError <=
        ~clearError
        & (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_17)
           | (|(_addrDecode_io_addrOut[31:2]))
             ? clearError
             : io_apb_PWDATA[0]);
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_18)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        rx_baud <= io_apb_PWDATA;
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_19)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        rx_clockFreq <= io_apb_PWDATA;
      rx_updateBaud <=
        ~rx_updateBaud
        & (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_20)
           | (|(_addrDecode_io_addrOut[31:2]))
             ? rx_updateBaud
             : io_apb_PWDATA[0]);
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_21)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        currentBits_14 <= io_apb_PWDATA[4:0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_22)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        rx_useParityDb <= io_apb_PWDATA[0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_23)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        rx_parityOddDb <= io_apb_PWDATA[0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_24)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        currentBits_17 <= io_apb_PWDATA[4:0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_25)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        currentBits_18 <= io_apb_PWDATA[4:0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_32)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        rxLsbFirst <= io_apb_PWDATA[0];
      if (~(_addrDecode_io_en_T & io_apb_PWRITE & _addrDecode_io_sel_33)
          | (|(_addrDecode_io_addrOut[31:2]))) begin
      end
      else
        txLsbFirst <= io_apb_PWDATA[0];
    end
  end // always @(posedge)
  AddrDecode addrDecode (
    .io_addrRaw   (io_apb_PADDR),
    .io_en        (_addrDecode_io_en_T),
    .io_sel_0     (_addrDecode_io_sel_0),
    .io_sel_1     (_addrDecode_io_sel_1),
    .io_sel_2     (_addrDecode_io_sel_2),
    .io_sel_3     (_addrDecode_io_sel_3),
    .io_sel_4     (_addrDecode_io_sel_4),
    .io_sel_5     (_addrDecode_io_sel_5),
    .io_sel_6     (_addrDecode_io_sel_6),
    .io_sel_7     (_addrDecode_io_sel_7),
    .io_sel_8     (_addrDecode_io_sel_8),
    .io_sel_9     (_addrDecode_io_sel_9),
    .io_sel_10    (_addrDecode_io_sel_10),
    .io_sel_11    (_addrDecode_io_sel_11),
    .io_sel_12    (_addrDecode_io_sel_12),
    .io_sel_13    (_addrDecode_io_sel_13),
    .io_sel_14    (_addrDecode_io_sel_14),
    .io_sel_15    (_addrDecode_io_sel_15),
    .io_sel_16    (_addrDecode_io_sel_16),
    .io_sel_17    (_addrDecode_io_sel_17),
    .io_sel_18    (_addrDecode_io_sel_18),
    .io_sel_19    (_addrDecode_io_sel_19),
    .io_sel_20    (_addrDecode_io_sel_20),
    .io_sel_21    (_addrDecode_io_sel_21),
    .io_sel_22    (_addrDecode_io_sel_22),
    .io_sel_23    (_addrDecode_io_sel_23),
    .io_sel_24    (_addrDecode_io_sel_24),
    .io_sel_25    (_addrDecode_io_sel_25),
    .io_sel_26    (_addrDecode_io_sel_26),
    .io_sel_27    (_addrDecode_io_sel_27),
    .io_sel_28    (_addrDecode_io_sel_28),
    .io_sel_29    (_addrDecode_io_sel_29),
    .io_sel_30    (_addrDecode_io_sel_30),
    .io_sel_31    (_addrDecode_io_sel_31),
    .io_sel_32    (_addrDecode_io_sel_32),
    .io_sel_33    (_addrDecode_io_sel_33),
    .io_addrOut   (_addrDecode_io_addrOut),
    .io_errorCode (_addrDecode_io_errorCode)
  );
  UartInner uartInner (
    .clock                               (clock),
    .reset                               (reset),
    .io_rx                               (io_rx),
    .io_dataOut                          (_uartInner_io_dataOut),
    .io_error_rxError                    (_uartInner_io_error_rxError),
    .io_error_txError                    (_uartInner_io_error_txError),
    .io_txControlBundle_load             (load),
    .io_txControlBundle_data             (dataIn),
    .io_txControlBundle_numOutputBitsDb  (currentBits_5),
    .io_txControlBundle_useParityDb      (currentBits_6),
    .io_txControlBundle_parityOddDb      (currentBits_7),
    .io_txControlBundle_baud             (tx_baud[20:0]),
    .io_txControlBundle_clockFreq        (tx_clockFreq[20:0]),
    .io_txControlBundle_updateBaud       (tx_updateBaud),
    .io_txControlBundle_clearErrorDb     (clearError),
    .io_txControlBundle_txDataRegWrite   (io_apb_PWRITE & _addrDecode_io_sel_1),
    .io_txControlBundle_almostEmptyLevel (currentBits_8),
    .io_txControlBundle_almostFullLevel  (currentBits_9),
    .io_txControlBundle_lsbFirst         (txLsbFirst),
    .io_rxControlBundle_baud             (rx_baud[20:0]),
    .io_rxControlBundle_clockFreq        (rx_clockFreq[20:0]),
    .io_rxControlBundle_updateBaud       (rx_updateBaud),
    .io_rxControlBundle_numOutputBitsDb  (currentBits_14),
    .io_rxControlBundle_useParityDb      (rx_useParityDb),
    .io_rxControlBundle_parityOddDb      (rx_parityOddDb),
    .io_rxControlBundle_clearErrorDb     (clearError),
    .io_rxControlBundle_rxDataRegRead    (~io_apb_PWRITE & _addrDecode_io_sel_14),
    .io_rxControlBundle_almostEmptyLevel (currentBits_17),
    .io_rxControlBundle_almostFullLevel  (currentBits_18),
    .io_rxControlBundle_lsbFirst         (rxLsbFirst),
    .io_rxFifoStatus_full                (_uartInner_io_rxFifoStatus_full),
    .io_rxFifoStatus_empty               (_uartInner_io_rxFifoStatus_empty),
    .io_rxFifoStatus_almostEmpty         (_uartInner_io_rxFifoStatus_almostEmpty),
    .io_rxFifoStatus_almostFull          (_uartInner_io_rxFifoStatus_almostFull),
    .io_txFifoStatus_full                (_uartInner_io_txFifoStatus_full),
    .io_txFifoStatus_empty               (_uartInner_io_txFifoStatus_empty),
    .io_txFifoStatus_almostEmpty         (_uartInner_io_txFifoStatus_almostEmpty),
    .io_txFifoStatus_almostFull          (_uartInner_io_txFifoStatus_almostFull),
    .io_tx                               (io_tx),
    .io_rxClocksPerBit                   (_uartInner_io_rxClocksPerBit),
    .io_txClocksPerBit                   (_uartInner_io_txClocksPerBit)
  );
  assign io_apb_PRDATA =
    ~_addrDecode_io_en_T | io_apb_PWRITE
      ? 32'h0
      : _addrDecode_io_sel_33
          ? ((|(_addrDecode_io_addrOut[31:2])) ? 32'h0 : {31'h0, txLsbFirst})
          : _addrDecode_io_sel_32
              ? ((|(_addrDecode_io_addrOut[31:2])) ? 32'h0 : {31'h0, rxLsbFirst})
              : _addrDecode_io_sel_31
                  ? ((|(_addrDecode_io_addrOut[31:2]))
                       ? 32'h0
                       : {11'h0, _uartInner_io_txClocksPerBit})
                  : _addrDecode_io_sel_30
                      ? ((|(_addrDecode_io_addrOut[31:2]))
                           ? 32'h0
                           : {11'h0, _uartInner_io_rxClocksPerBit})
                      : _addrDecode_io_sel_29
                          ? ((|(_addrDecode_io_addrOut[31:2]))
                               ? 32'h0
                               : {31'h0, _uartInner_io_rxFifoStatus_almostFull})
                          : _addrDecode_io_sel_28
                              ? ((|(_addrDecode_io_addrOut[31:2]))
                                   ? 32'h0
                                   : {31'h0, _uartInner_io_rxFifoStatus_almostEmpty})
                              : _addrDecode_io_sel_27
                                  ? ((|(_addrDecode_io_addrOut[31:2]))
                                       ? 32'h0
                                       : {31'h0, _uartInner_io_rxFifoStatus_empty})
                                  : _addrDecode_io_sel_26
                                      ? ((|(_addrDecode_io_addrOut[31:2]))
                                           ? 32'h0
                                           : {31'h0, _uartInner_io_rxFifoStatus_full})
                                      : _addrDecode_io_sel_25
                                          ? ((|(_addrDecode_io_addrOut[31:2]))
                                               ? 32'h0
                                               : {27'h0, currentBits_18})
                                          : _addrDecode_io_sel_24
                                              ? ((|(_addrDecode_io_addrOut[31:2]))
                                                   ? 32'h0
                                                   : {27'h0, currentBits_17})
                                              : _addrDecode_io_sel_23
                                                  ? ((|(_addrDecode_io_addrOut[31:2]))
                                                       ? 32'h0
                                                       : {31'h0, rx_parityOddDb})
                                                  : _addrDecode_io_sel_22
                                                      ? ((|(_addrDecode_io_addrOut[31:2]))
                                                           ? 32'h0
                                                           : {31'h0, rx_useParityDb})
                                                      : _addrDecode_io_sel_21
                                                          ? ((|(_addrDecode_io_addrOut[31:2]))
                                                               ? 32'h0
                                                               : {27'h0, currentBits_14})
                                                          : _addrDecode_io_sel_20
                                                              ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                   ? 32'h0
                                                                   : {31'h0,
                                                                      rx_updateBaud})
                                                              : _addrDecode_io_sel_19
                                                                  ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                       ? 32'h0
                                                                       : rx_clockFreq)
                                                                  : _addrDecode_io_sel_18
                                                                      ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                           ? 32'h0
                                                                           : rx_baud)
                                                                      : _addrDecode_io_sel_17
                                                                          ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                               ? 32'h0
                                                                               : {31'h0,
                                                                                  clearError})
                                                                          : _addrDecode_io_sel_16
                                                                              ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                   ? 32'h0
                                                                                   : {24'h0,
                                                                                      error_topError,
                                                                                      error_rxError,
                                                                                      error_txError,
                                                                                      error_addrDecodeError})
                                                                              : _addrDecode_io_sel_15
                                                                                  ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                       ? 32'h0
                                                                                       : {31'h0,
                                                                                          ~_uartInner_io_rxFifoStatus_empty})
                                                                                  : _addrDecode_io_sel_14
                                                                                      ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                           ? 32'h0
                                                                                           : {23'h0,
                                                                                              _uartInner_io_dataOut})
                                                                                      : _addrDecode_io_sel_13
                                                                                          ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                               ? 32'h0
                                                                                               : {31'h0,
                                                                                                  _uartInner_io_txFifoStatus_almostFull})
                                                                                          : _addrDecode_io_sel_12
                                                                                              ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                   ? 32'h0
                                                                                                   : {31'h0,
                                                                                                      _uartInner_io_txFifoStatus_almostEmpty})
                                                                                              : _addrDecode_io_sel_11
                                                                                                  ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                       ? 32'h0
                                                                                                       : {31'h0,
                                                                                                          _uartInner_io_txFifoStatus_empty})
                                                                                                  : _addrDecode_io_sel_10
                                                                                                      ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                           ? 32'h0
                                                                                                           : {31'h0,
                                                                                                              _uartInner_io_txFifoStatus_full})
                                                                                                      : _addrDecode_io_sel_9
                                                                                                          ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                               ? 32'h0
                                                                                                               : {27'h0,
                                                                                                                  currentBits_9})
                                                                                                          : _addrDecode_io_sel_8
                                                                                                              ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                                   ? 32'h0
                                                                                                                   : {27'h0,
                                                                                                                      currentBits_8})
                                                                                                              : _addrDecode_io_sel_7
                                                                                                                  ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                                       ? 32'h0
                                                                                                                       : {31'h0,
                                                                                                                          currentBits_7})
                                                                                                                  : _addrDecode_io_sel_6
                                                                                                                      ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                                           ? 32'h0
                                                                                                                           : {31'h0,
                                                                                                                              currentBits_6})
                                                                                                                      : _addrDecode_io_sel_5
                                                                                                                          ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                                               ? 32'h0
                                                                                                                               : {27'h0,
                                                                                                                                  currentBits_5})
                                                                                                                          : _addrDecode_io_sel_4
                                                                                                                              ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                                                   ? 32'h0
                                                                                                                                   : {31'h0,
                                                                                                                                      tx_updateBaud})
                                                                                                                              : _addrDecode_io_sel_3
                                                                                                                                  ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                                                       ? 32'h0
                                                                                                                                       : tx_clockFreq)
                                                                                                                                  : _addrDecode_io_sel_2
                                                                                                                                      ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                                                           ? 32'h0
                                                                                                                                           : tx_baud)
                                                                                                                                      : _addrDecode_io_sel_1
                                                                                                                                          ? ((|(_addrDecode_io_addrOut[31:2]))
                                                                                                                                               ? 32'h0
                                                                                                                                               : {23'h0,
                                                                                                                                                  dataIn})
                                                                                                                                          : ~_addrDecode_io_sel_0
                                                                                                                                            | (|(_addrDecode_io_addrOut[31:2]))
                                                                                                                                              ? 32'h0
                                                                                                                                              : {31'h0,
                                                                                                                                                 load};
  assign io_apb_PREADY = io_apb_PENABLE & io_apb_PSEL;
  assign io_apb_PSLVERR = _addrDecode_io_errorCode;
endmodule